<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN" "http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><!--This file was converted to xhtml by OpenOffice.org - see http://xml.openoffice.org/odf2xhtml for more info.--><head profile="http://dublincore.org/documents/dcmi-terms/"><meta http-equiv="Content-Type" content="application/xhtml+xml; charset=utf-8"/><title xml:lang="en-US">- no title specified</title><meta name="DCTERMS.title" content="" xml:lang="en-US"/><meta name="DCTERMS.language" content="en-US" scheme="DCTERMS.RFC4646"/><meta name="DCTERMS.source" content="http://xml.openoffice.org/odf2xhtml"/><meta name="DCTERMS.creator" content="Jon Moorman"/><meta name="DCTERMS.issued" content="2010-03-11T20:49:44.46" scheme="DCTERMS.W3CDTF"/><meta name="DCTERMS.contributor" content="Jon Moorman"/><meta name="DCTERMS.modified" content="2010-03-12T00:47:54.76" scheme="DCTERMS.W3CDTF"/><meta name="DCTERMS.provenance" content="" xml:lang="en-US"/><meta name="DCTERMS.subject" content="," xml:lang="en-US"/><link rel="schema.DC" href="http://purl.org/dc/elements/1.1/" hreflang="en"/><link rel="schema.DCTERMS" href="http://purl.org/dc/terms/" hreflang="en"/><link rel="schema.DCTYPE" href="http://purl.org/dc/dcmitype/" hreflang="en"/><link rel="schema.DCAM" href="http://purl.org/dc/dcam/" hreflang="en"/><base href="."/><style type="text/css">
	@page {  }
	table { border-collapse:collapse; border-spacing:0; empty-cells:show }
	td, th { vertical-align:top; font-size:12pt;}
	h1, h2, h3, h4, h5, h6 { clear:both }
	ol, ul { margin:0; padding:0;}
	li { list-style: none; margin:0; padding:0;}
	<!-- "li span.odfLiEnd" - IE 7 issue-->
	li span. { clear: both; line-height:0; width:0; height:0; margin:0; padding:0; }
	span.footnodeNumber { padding-right:1em; }
	span.annotation_style_by_filter { font-size:95%; font-family:Arial; background-color:#fff000;  margin:0; border:0; padding:0;  }
	* { margin:0;}
	.P1 { font-size:12pt; font-family:Times New Roman; writing-mode:page; font-weight:bold; }
	.Standard { font-size:12pt; font-family:Times New Roman; writing-mode:page; }
	<!-- ODF styles with no properties representable as CSS -->
	.Numbering_20_Symbols { }
	</style></head><body dir="ltr" style="max-width:8.5in;margin-top:0.7874in; margin-bottom:0.7874in; margin-left:0.7874in; margin-right:0.7874in; "><p class="Standard">Toleco: a turn-based strategy game for everyone</p><p class="Standard">Team Ocelot</p><p class="Standard">March 12, 2010</p><p class="P1"> </p><p class="Standard">Toleco is a turn-based strategy game that is implemented using the Model-View-Controller (MVC) architecture. Because of the division into these three components, the view is kept separate from the model. All interactions between the view and the model are handled by the controller to support the implementation of alternate views. Another developer could create a different GUI without altering any of the actual game logic. The TolecoApp creates an instance of a GameBoard, an I_GameView, and an I_Controller. A different view and controller is loaded depending on if the user is entering an actual game or if the user is entering the map editor. </p><p class="Standard"> </p><p class="Standard">Model:</p><p class="Standard">The model is the portion of the application that represents the game state. The main component of the model is GameBoard. GameBoard keeps track of all of the different units and terrains that are on the map. It builds its units and terrain through factory classes. The factory classes determine all of the possible units and terrains at runtime by reading properties files. They can then build units and terrains of those types and place them according to the map that has been loaded.</p><p class="Standard"> </p><p class="Standard">View:</p><p class="Standard">The view portion of the application is, in most cases, a GUI, however a console mode is also available for testing purposes. There are two possible GUI views that can be loaded. Each component is composed of three sub-components. The three sub-components represent the three different areas on the screen: the map, the sidebar, and the buttons. The MapView is shared between the EditorGameView and SwingGameView because its function does not change between the two modes. In both cases it only needs to be a graphical representation of the GameBoard.</p><p class="Standard"> </p><p class="Standard">Controller:</p><p class="Standard">The controller handles the interactions between the view and the model. When the user interacts with the GUI, ActionEvents are dispatched which the controller is listening for. The controller determines how to handle each action and then tells the GameBoard how to update itself. This separates the game logic from the GUI logic so that a new GUI could easily be integrated into the system if desired. </p><p class="Standard"> </p><p class="Standard"> </p><p class="Standard">Tools: Netbeans IDE 6.8, Violet UML 0.21.1</p><p class="Standard"><span style="position:absolute;left:NaNcm;"/></p><p class="Standard">Libraries: </p><p class="Standard">We used the Java standard library so that we could use the Swing GUI components, ActionListeners, and the Observer-Observable relationship</p><p class="Standard"> </p><p class="Standard">Related Links:</p><p class="Standard">SRS - <a href="https://wiki.csc.calpoly.edu/Ocelot/wiki/SRSv2">https://wiki.csc.calpoly.edu/Ocelot/wiki/SRSv2</a></p><p class="Standard">SRS traceability - <a href="https://wiki.csc.calpoly.edu/Ocelot/wiki/wiki%3ASRS%20Traceability">https://wiki.csc.calpoly.edu/Ocelot/wiki/wiki%3ASRS%20Traceability</a></p><p class="Standard">Functional Prototype - <a href="https://wiki.csc.calpoly.edu/Ocelot/wiki/Functional_Prototype">https://wiki.csc.calpoly.edu/Ocelot/wiki/Functional_Prototype</a></p><p class="Standard">Class Diagram - <a href="https://wiki.csc.calpoly.edu/Ocelot/wiki/ClassDiagram">https://wiki.csc.calpoly.edu/Ocelot/wiki/ClassDiagram</a></p><p class="Standard"> </p><p class="Standard">authors: Jon Moorman, Eriq Augustine, Adam Armstrong, Matt Tognetti, Andrew Barton, Evan Ralston</p><p class="Standard">version 1.0</p></body></html>